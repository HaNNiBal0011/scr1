"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logging
import logging.handlers
import os
import sys
from datetime import datetime
from typing import Optional, Dict, Any
import threading
from pathlib import Path

class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Green
        'WARNING': '\033[33m',   # Yellow
        'ERROR': '\033[31m',     # Red
        'CRITICAL': '\033[35m',  # Magenta
        'RESET': '\033[0m'       # Reset
    }
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if record.levelname in self.COLORS:
            record.levelname = (
                f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"
            )
        
        return super().format(record)

class ThreadSafeHandler(logging.Handler):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤"""
    
    def __init__(self, handler):
        super().__init__()
        self.handler = handler
        self.lock = threading.Lock()
    
    def emit(self, record):
        with self.lock:
            self.handler.emit(record)
    
    def __getattr__(self, name):
        return getattr(self.handler, name)

class CallbackHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ callback —Ñ—É–Ω–∫—Ü–∏—é"""
    
    def __init__(self, callback_func):
        super().__init__()
        self.callback_func = callback_func
    
    def emit(self, record):
        if self.callback_func:
            try:
                message = self.format(record)
                self.callback_func(message, record.levelname)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ callback
                pass

class ScraperLogger:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    
    def __init__(self, name: str = "ProductScraper", log_dir: str = "logs"):
        self.name = name
        self.log_dir = Path(log_dir)
        self.logger = None
        self.callback_handlers = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
        self.log_dir.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self._setup_logger()
    
    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        self.logger = logging.getLogger(self.name)
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –§–æ—Ä–º–∞—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        detailed_format = logging.Formatter(
            '[%(asctime)s] %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
        )
        
        simple_format = logging.Formatter(
            '[%(asctime)s] %(levelname)s: %(message)s'
        )
        
        colored_format = ColoredFormatter(
            '[%(asctime)s] %(levelname)s: %(message)s'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥)
        log_file = self.log_dir / f"{self.name}.log"
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(detailed_format)
        self.logger.addHandler(ThreadSafeHandler(file_handler))
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
        error_file = self.log_dir / f"{self.name}_errors.log"
        error_handler = logging.handlers.RotatingFileHandler(
            error_file,
            maxBytes=5*1024*1024,  # 5MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(detailed_format)
        self.logger.addHandler(ThreadSafeHandler(error_handler))
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(colored_format)
        self.logger.addHandler(console_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_file = self.log_dir / f"{self.name}_stats.log"
        stats_handler = logging.handlers.RotatingFileHandler(
            stats_file,
            maxBytes=1*1024*1024,  # 1MB
            backupCount=2,
            encoding='utf-8'
        )
        stats_handler.setLevel(logging.INFO)
        stats_handler.setFormatter(simple_format)
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_handler.addFilter(self._stats_filter)
        self.logger.addHandler(ThreadSafeHandler(stats_handler))
    
    def _stats_filter(self, record):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        stats_keywords = ['—É—Å–ø–µ—à–Ω–æ', '–æ–±—Ä–∞–±–æ—Ç–∞–Ω', '–∑–∞–≤–µ—Ä—à–µ–Ω', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']
        return any(keyword in record.getMessage().lower() for keyword in stats_keywords)
    
    def add_callback_handler(self, callback_func, level: int = logging.INFO):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        handler = CallbackHandler(callback_func)
        handler.setLevel(level)
        handler.setFormatter(logging.Formatter('%(message)s'))
        
        self.callback_handlers.append(handler)
        self.logger.addHandler(handler)
    
    def remove_callback_handler(self, callback_func):
        """–£–¥–∞–ª–µ–Ω–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        handlers_to_remove = []
        for handler in self.callback_handlers:
            if handler.callback_func == callback_func:
                handlers_to_remove.append(handler)
                self.logger.removeHandler(handler)
        
        for handler in handlers_to_remove:
            self.callback_handlers.remove(handler)
    
    def log_scraping_start(self, product_count: int, method: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        self.logger.info("=== –ù–∞—á–∞–ª–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ ===")
        self.logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {product_count}")
        self.logger.info(f"–ú–µ—Ç–æ–¥: {method}")
        current_time = datetime.now()
        self.logger.info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {current_time.year:04d}-{current_time.month:02d}-{current_time.day:02d} {current_time.hour:02d}:{current_time.minute:02d}:{current_time.second:02d}")
    
    def log_scraping_end(self, success_count: int, error_count: int, total_time: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        self.logger.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ ===")
        self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        self.logger.info(f"–û—à–∏–±–æ–∫: {error_count}")
        self.logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        current_time = datetime.now()
        self.logger.info(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {current_time.year:04d}-{current_time.month:02d}-{current_time.day:02d} {current_time.hour:02d}:{current_time.minute:02d}:{current_time.second:02d}")
    
    def log_product_result(self, product_id: str, site: str, success: bool, 
                          method: str = "", response_time: float = 0, error: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        if success:
            self.logger.info(f"‚úì {product_id} ({site}) - —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {response_time:.2f}—Å [{method}]")
        else:
            self.logger.error(f"‚úó {product_id} ({site}) - –æ—à–∏–±–∫–∞: {error} [{method}]")
    
    def log_method_fallback(self, product_id: str, primary_method: str, fallback_method: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ fallback –º–µ—Ç–æ–¥"""
        self.logger.warning(f"üîÑ {product_id} - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {primary_method} –Ω–∞ {fallback_method}")
    
    def log_site_status(self, site: str, status: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞"""
        status_emoji = {
            "available": "üü¢",
            "slow": "üü°", 
            "blocked": "üî¥",
            "error": "‚ùå"
        }
        
        emoji = status_emoji.get(status, "‚ÑπÔ∏è")
        message = f"{emoji} {site}: {status}"
        if details:
            message += f" - {details}"
        
        if status in ["blocked", "error"]:
            self.logger.error(message)
        elif status == "slow":
            self.logger.warning(message)
        else:
            self.logger.info(message)
    
    def log_performance_metrics(self, metrics: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.logger.info("=== –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
        for metric, value in metrics.items():
            self.logger.info(f"{metric}: {value}")
    
    def debug(self, message: str):
        """Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.debug(message)
    
    def info(self, message: str):
        """Info –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.info(message)
    
    def warning(self, message: str):
        """Warning –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.warning(message)
    
    def error(self, message: str, exc_info: bool = False):
        """Error –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.error(message, exc_info=exc_info)
    
    def critical(self, message: str, exc_info: bool = False):
        """Critical –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.critical(message, exc_info=exc_info)
    
    def exception(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        self.logger.exception(message)
    
    def set_level(self, level: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.setLevel(level)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        for handler in self.logger.handlers:
            if isinstance(handler, logging.StreamHandler) and handler.stream == sys.stdout:
                handler.setLevel(level)
    
    def get_log_files(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤"""
        return {
            "main": str(self.log_dir / f"{self.name}.log"),
            "errors": str(self.log_dir / f"{self.name}_errors.log"),
            "stats": str(self.log_dir / f"{self.name}_stats.log")
        }
    
    def cleanup_old_logs(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        import time
        
        current_time = time.time()
        cutoff_time = current_time - (days * 24 * 60 * 60)
        
        for log_file in self.log_dir.glob("*.log*"):
            if log_file.stat().st_mtime < cutoff_time:
                try:
                    log_file.unlink()
                    self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥ —Ñ–∞–π–ª: {log_file}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞ {log_file}: {e}")

class LogAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, log_file_path: str):
        self.log_file_path = Path(log_file_path)
    
    def get_error_summary(self, last_hours: int = 24) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã"""
        if not self.log_file_path.exists():
            return {}
        
        import re
        from datetime import datetime, timedelta
        
        error_counts = {}
        cutoff_time = datetime.now() - timedelta(hours=last_hours)
        
        try:
            with open(self.log_file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if 'ERROR' in line or 'CRITICAL' in line:
                        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å timestamp
                        timestamp_match = re.search(r'\[(.*?)\]', line)
                        if timestamp_match:
                            try:
                                # Parse timestamp safely
                                timestamp_str = timestamp_match.group(1)
                                try:
                                    timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                                except ValueError:
                                    # Try alternative format
                                    timestamp = datetime.strptime(timestamp_str, '%H:%M:%S')
                                    # Use today's date
                                    today = datetime.now().date()
                                    timestamp = datetime.combine(today, timestamp.time())
                                if timestamp >= cutoff_time:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                                    error_type = self._extract_error_type(line)
                                    error_counts[error_type] = error_counts.get(error_type, 0) + 1
                            except ValueError:
                                pass
        except Exception:
            pass
        
        return error_counts
    
    def _extract_error_type(self, log_line: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
        line_lower = log_line.lower()
        
        if 'timeout' in line_lower:
            return 'Timeout'
        elif 'connection' in line_lower:
            return 'Connection Error'
        elif 'blocked' in line_lower or 'captcha' in line_lower:
            return 'Site Blocking'
        elif 'selenium' in line_lower or 'webdriver' in line_lower:
            return 'WebDriver Error'
        elif 'parse' in line_lower or 'parsing' in line_lower:
            return 'Parsing Error'
        else:
            return 'Other Error'
    
    def get_success_rate(self, last_hours: int = 24) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã"""
        if not self.log_file_path.exists():
            return 0.0
        
        import re
        from datetime import datetime, timedelta
        
        success_count = 0
        error_count = 0
        cutoff_time = datetime.now() - timedelta(hours=last_hours)
        
        try:
            with open(self.log_file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    timestamp_match = re.search(r'\[(.*?)\]', line)
                    if timestamp_match:
                        try:
                            # Parse timestamp safely
                            timestamp_str = timestamp_match.group(1)
                            try:
                                timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                            except ValueError:
                                # Try alternative format
                                timestamp = datetime.strptime(timestamp_str, '%H:%M:%S')
                                # Use today's date
                                today = datetime.now().date()
                                timestamp = datetime.combine(today, timestamp.time())
                            if timestamp >= cutoff_time:
                                if '‚úì' in line and '—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' in line:
                                    success_count += 1
                                elif '‚úó' in line and '–æ—à–∏–±–∫–∞:' in line:
                                    error_count += 1
                        except ValueError:
                            pass
        except Exception:
            pass
        
        total = success_count + error_count
        return (success_count / total * 100) if total > 0 else 0.0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_global_logger: Optional[ScraperLogger] = None

def setup_logger(name: str = "ProductScraper", log_dir: str = "logs") -> ScraperLogger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
    global _global_logger
    _global_logger = ScraperLogger(name, log_dir)
    return _global_logger

def get_logger() -> Optional[ScraperLogger]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
    return _global_logger

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_info(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ info –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if _global_logger:
        _global_logger.info(message)

def log_error(message: str, exc_info: bool = False):
    """–ë—ã—Å—Ç—Ä–æ–µ error –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if _global_logger:
        _global_logger.error(message, exc_info)

def log_warning(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ warning –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if _global_logger:
        _global_logger.warning(message)

def log_debug(message: str):
    """–ë—ã—Å—Ç—Ä–æ–µ debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if _global_logger:
        _global_logger.debug(message)
