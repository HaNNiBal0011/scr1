#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Product Scraper Pro
"""

import sys
import os
import customtkinter as ctk
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ Product Scraper Pro...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter
ctk.set_appearance_mode("system")
ctk.set_default_color_theme("blue")

class ProductScraperGUI(ctk.CTk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Product Scraper Pro"""
    
    def __init__(self):
        super().__init__()
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("Product Scraper Pro - –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤")
        self.geometry("1000x700")
        self.minsize(800, 600)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] GUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(self, height=80)
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title_label = ctk.CTkLabel(
            header_frame, 
            text="Product Scraper Pro", 
            font=ctk.CTkFont(size=28, weight="bold")
        )
        title_label.pack(pady=25)
        
        subtitle_label = ctk.CTkLabel(
            header_frame, 
            text="–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JavaScript", 
            font=ctk.CTkFont(size=14)
        )
        subtitle_label.pack()
        
        # –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_panel = ctk.CTkFrame(main_frame, width=300)
        left_panel.pack(side="left", fill="y", padx=(20, 10), pady=20)
        left_panel.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_title = ctk.CTkLabel(
            left_panel, 
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞", 
            font=ctk.CTkFont(size=18, weight="bold")
        )
        settings_title.pack(pady=20)
        
        # –ú–µ—Ç–æ–¥ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
        method_label = ctk.CTkLabel(left_panel, text="–ú–µ—Ç–æ–¥ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞:")
        method_label.pack(pady=(10, 5))
        
        self.method_var = ctk.StringVar(value="CloudScraper")
        method_combo = ctk.CTkComboBox(
            left_panel,
            values=["CloudScraper", "Selenium", "–ì–∏–±—Ä–∏–¥–Ω—ã–π"],
            variable=self.method_var,
            width=250
        )
        method_combo.pack(pady=(0, 15))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.headless_var = ctk.BooleanVar(value=True)
        headless_check = ctk.CTkCheckBox(
            left_panel,
            text="Headless —Ä–µ–∂–∏–º (–±–µ–∑ GUI –±—Ä–∞—É–∑–µ—Ä–∞)",
            variable=self.headless_var
        )
        headless_check.pack(pady=5, anchor="w", padx=20)
        
        self.fallback_var = ctk.BooleanVar(value=True)
        fallback_check = ctk.CTkCheckBox(
            left_panel,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Selenium fallback",
            variable=self.fallback_var
        )
        fallback_check.pack(pady=5, anchor="w", padx=20)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        threads_label = ctk.CTkLabel(left_panel, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤:")
        threads_label.pack(pady=(20, 5))
        
        self.threads_var = ctk.IntVar(value=3)
        threads_slider = ctk.CTkSlider(
            left_panel, 
            from_=1, to=10, 
            number_of_steps=9,
            variable=self.threads_var,
            width=250
        )
        threads_slider.pack(pady=(0, 10))
        
        self.threads_label = ctk.CTkLabel(left_panel, text="3 –ø–æ—Ç–æ–∫–∞")
        self.threads_label.pack()
        threads_slider.configure(command=self.update_threads_label)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(left_panel)
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        start_btn = ctk.CTkButton(
            buttons_frame,
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–µ–π–ø–∏–Ω–≥",
            command=self.start_scraping,
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40
        )
        start_btn.pack(fill="x", pady=5)
        
        load_btn = ctk.CTkButton(
            buttons_frame,
            text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
            command=self.load_products
        )
        load_btn.pack(fill="x", pady=5)
        
        export_btn = ctk.CTkButton(
            buttons_frame,
            text="üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            command=self.export_results
        )
        export_btn.pack(fill="x", pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ª–æ–≥–∏
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.pack(side="right", fill="both", expand=True, padx=(10, 20), pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_title = ctk.CTkLabel(
            right_panel, 
            text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", 
            font=ctk.CTkFont(size=18, weight="bold")
        )
        info_title.pack(pady=20)
        
        info_text = """
‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JavaScript-—Å–∞–π—Ç–æ–≤
‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CloudScraper –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
‚úì Selenium WebDriver –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
‚úì –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
‚úì –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV, JSON, Excel —Ñ–æ—Ä–º–∞—Ç—ã
‚úì –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
‚úì –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ —Ç–∞–π–º–∞—É—Ç—ã

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —É–∫—Ä–∞–∏–Ω—Å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞–º–∏:
‚Ä¢ Rozetka.com.ua
‚Ä¢ Allo.ua  
‚Ä¢ Comfy.ua
‚Ä¢ Epicentr.ua
        """.strip()
        
        info_label = ctk.CTkLabel(
            right_panel,
            text=info_text,
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        info_label.pack(padx=20, pady=10, fill="both", expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ctk.CTkFrame(self, height=40)
        self.status_frame.pack(side="bottom", fill="x", padx=20, pady=(0, 20))
        self.status_frame.pack_propagate(False)
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(pady=10)
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def update_threads_label(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤"""
        threads = int(value)
        self.threads_label.configure(text=f"{threads} {'–ø–æ—Ç–æ–∫' if threads == 1 else '–ø–æ—Ç–æ–∫–∞' if threads < 5 else '–ø–æ—Ç–æ–∫–æ–≤'}")
    
    def start_scraping(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        method = self.method_var.get()
        threads = self.threads_var.get()
        headless = self.headless_var.get()
        fallback = self.fallback_var.get()
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞:")
        print(f"  –ú–µ—Ç–æ–¥: {method}")
        print(f"  –ü–æ—Ç–æ–∫–æ–≤: {threads}")
        print(f"  Headless: {headless}")
        print(f"  Fallback: {fallback}")
        
        self.status_label.configure(text=f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ –º–µ—Ç–æ–¥–æ–º {method}...")
        
        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥ –º–æ–¥—É–ª—è–º–∏
    
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        self.status_label.configure(text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
        # TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.status_label.configure(text="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        # TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = ProductScraperGUI()
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        app.mainloop()
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except KeyboardInterrupt:
        print(f"\n[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()