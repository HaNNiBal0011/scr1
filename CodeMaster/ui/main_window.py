"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º UI –Ω–∞ CustomTkinter
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import customtkinter as ctk
import threading
import time
import json
import csv
from typing import List, Dict, Optional, Tuple
from datetime import datetime

from ui.components import (
    ModernFrame, StatusBar, ProgressFrame, 
    LogFrame, ResultsFrame, SettingsFrame
)
from ui.dialogs import SettingsDialog, AboutDialog, ExportDialog
from ui.themes import ThemeManager
from scraper.site_scrapers import HybridScraper
from scraper.base_scraper import ScrapingMethod, ScrapingStatus
from utils.config import Config
from utils.logger import setup_logger
from utils.export import ExportManager

class MainWindow(ctk.CTk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title("Product Scraper Pro - –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤")
        self.geometry("1400x900")
        self.minsize(1200, 700)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.config = Config()
        self.logger = setup_logger()
        self.theme_manager = ThemeManager()
        self.export_manager = ExportManager()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.scraper = None
        self.scraper_thread = None
        self.is_scraping = False
        self.results = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        self._setup_theme()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        self._setup_layout()
        self._bind_events()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.load_settings()
        
        self.logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        theme = self.config.get('appearance', 'theme', 'system')
        ctk.set_appearance_mode(theme)
        
        color_theme = self.config.get('appearance', 'color_theme', 'blue')
        ctk.set_default_color_theme(color_theme)
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self._create_menu()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar = self._create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ctk.CTkFrame(self)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
        self.settings_frame = SettingsFrame(self.main_container)
        
        # –ü–∞–Ω–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_frame = ProgressFrame(self.main_container)
        
        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤
        self.log_frame = LogFrame(self.main_container)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame = ResultsFrame(self.main_container)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = StatusBar(self)
    
    def _create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self)
        self.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...", command=self.load_products_file)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", command=self.save_results)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...", command=self.export_to_csv)
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON...", command=self.export_to_json)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.quit)
        
        # –ú–µ–Ω—é "–°–∫—Ä–µ–π–ø–∏–Ω–≥"
        scraping_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–∫—Ä–µ–π–ø–∏–Ω–≥", menu=scraping_menu)
        scraping_menu.add_command(label="–ù–∞—á–∞—Ç—å —Å–∫—Ä–µ–π–ø–∏–Ω–≥", command=self.start_scraping)
        scraping_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–µ–π–ø–∏–Ω–≥", command=self.stop_scraping)
        scraping_menu.add_separator()
        scraping_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", command=self.clear_results)
        scraping_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_logs)
        
        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)
        settings_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", command=self.open_settings)
        settings_menu.add_separator()
        
        # –ü–æ–¥–º–µ–Ω—é —Ç–µ–º
        theme_menu = tk.Menu(settings_menu, tearoff=0)
        settings_menu.add_cascade(label="–¢–µ–º–∞", menu=theme_menu)
        theme_menu.add_command(label="–°–∏—Å—Ç–µ–º–Ω–∞—è", command=lambda: self.change_theme("system"))
        theme_menu.add_command(label="–°–≤–µ—Ç–ª–∞—è", command=lambda: self.change_theme("light"))
        theme_menu.add_command(label="–¢–µ–º–Ω–∞—è", command=lambda: self.change_theme("dark"))
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", command=self.show_hotkeys)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
    
    def _create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar = ctk.CTkFrame(self, height=50)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.start_btn = ctk.CTkButton(
            toolbar, text="‚ñ∂ –ù–∞—á–∞—Ç—å", 
            command=self.start_scraping,
            width=100, height=35
        )
        self.start_btn.pack(side="left", padx=5, pady=7)
        
        self.stop_btn = ctk.CTkButton(
            toolbar, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            command=self.stop_scraping,
            width=100, height=35,
            state="disabled"
        )
        self.stop_btn.pack(side="left", padx=5, pady=7)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(toolbar, width=2, height=30)
        separator.pack(side="left", padx=10, pady=10, fill="y")
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.load_btn = ctk.CTkButton(
            toolbar, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
            command=self.load_products_file,
            width=140, height=35
        )
        self.load_btn.pack(side="left", padx=5, pady=7)
        
        self.export_btn = ctk.CTkButton(
            toolbar, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç", 
            command=self.export_results,
            width=100, height=35
        )
        self.export_btn.pack(side="left", padx=5, pady=7)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator2 = ctk.CTkFrame(toolbar, width=2, height=30)
        separator2.pack(side="left", padx=10, pady=10, fill="y")
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_btn = ctk.CTkButton(
            toolbar, text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
            command=self.open_settings,
            width=100, height=35
        )
        self.settings_btn.pack(side="left", padx=5, pady=7)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–µ—Ç–æ–¥–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
        self.method_label = ctk.CTkLabel(
            toolbar, text="–ú–µ—Ç–æ–¥: CloudScraper + Selenium", 
            font=ctk.CTkFont(size=12)
        )
        self.method_label.pack(side="right", padx=10, pady=7)
        
        return toolbar
    
    def _setup_layout(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.pack(fill="x", padx=5, pady=(5, 0))
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        self.main_container.grid_columnconfigure(1, weight=1)
        self.main_container.grid_rowconfigure(1, weight=1)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
        self.settings_frame.grid(row=0, column=0, columnspan=2, sticky="ew", padx=5, pady=5)
        self.progress_frame.grid(row=1, column=0, sticky="nsew", padx=(5, 2), pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.right_panel = ctk.CTkTabview(self.main_container)
        self.right_panel.grid(row=1, column=1, sticky="nsew", padx=(2, 5), pady=5)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.right_panel.add("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.right_panel.add("–õ–æ–≥–∏")
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –≤–∫–ª–∞–¥–∫–∞—Ö
        self.results_frame = ResultsFrame(self.right_panel.tab("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
        self.results_frame.pack(fill="both", expand=True)
        
        self.log_frame = LogFrame(self.right_panel.tab("–õ–æ–≥–∏"))
        self.log_frame.pack(fill="both", expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar.pack(fill="x", side="bottom")
    
    def _bind_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.bind_all("<Control-o>", lambda e: self.load_products_file())
        self.bind_all("<Control-s>", lambda e: self.save_results())
        self.bind_all("<Control-e>", lambda e: self.export_results())
        self.bind_all("<Control-Return>", lambda e: self.start_scraping())
        self.bind_all("<Escape>", lambda e: self.stop_scraping())
        self.bind_all("<F5>", lambda e: self.clear_results())
        self.bind_all("<Control-comma>", lambda e: self.open_settings())
        
        # –°–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def start_scraping(self):
        """–ù–∞—á–∞–ª–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        if self.is_scraping:
            self.logger.warning("–°–∫—Ä–µ–π–ø–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        products = self.settings_frame.get_products_list()
        if not products:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = self.settings_frame.get_settings()
        
        self.logger.info(f"–ù–∞—á–∞–ª–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.is_scraping = True
        self.start_btn.configure(state="disabled")
        self.stop_btn.configure(state="normal")
        self.status_bar.set_status("–°–∫—Ä–µ–π–ø–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–µ–π–ø–µ—Ä–∞
        self.scraper = HybridScraper(
            preferred_method=settings['method'],
            use_selenium_fallback=settings['use_fallback'],
            headless=settings['headless'],
            progress_callback=self.progress_frame.update_progress,
            log_callback=self.log_frame.add_log
        )
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scraper_thread = threading.Thread(
            target=self._scraping_worker,
            args=(products, settings),
            daemon=True
        )
        self.scraper_thread.start()
    
    def stop_scraping(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        if not self.is_scraping:
            return
        
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞...")
        
        if self.scraper:
            self.scraper.stop()
        
        self.status_bar.set_status("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞...")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±—É–¥–µ—Ç –≤ _scraping_worker –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    
    def _scraping_worker(self, products: List[Tuple[str, str]], settings: Dict):
        """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results.clear()
            self.results_frame.clear_results()
            
            # –°–∫—Ä–µ–π–ø–∏–Ω–≥
            results = self.scraper.scrape_multiple_products(
                products, 
                max_workers=settings.get('max_workers', 3)
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results = results
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.after(0, self._update_results_table)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = self.scraper.get_statistics()
            success_count = stats['success_count']
            total_count = len(products)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.after(0, lambda: self._scraping_finished(success_count, total_count))
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞: {e}")
            self.after(0, lambda: self._scraping_error(str(e)))
    
    def _scraping_finished(self, success_count: int, total_count: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        self.is_scraping = False
        self.start_btn.configure(state="normal")
        self.stop_btn.configure(state="disabled")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        status_text = f"–°–∫—Ä–µ–π–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}"
        self.status_bar.set_status(status_text)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_frame.set_complete()
        
        self.logger.info(f"–°–∫—Ä–µ–π–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {total_count} —Ç–æ–≤–∞—Ä–æ–≤")
    
    def _scraping_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞"""
        self.is_scraping = False
        self.start_btn.configure(state="normal")
        self.stop_btn.configure(state="disabled")
        
        self.status_bar.set_status(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞: {error_message}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–µ:\n{error_message}")
    
    def _update_results_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_frame.update_results(self.results)
    
    def load_products_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤",
            filetypes=[
                ("Text files", "*.txt"),
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                products = []
                
                if file_path.endswith('.csv'):
                    with open(file_path, 'r', encoding='utf-8') as file:
                        reader = csv.reader(file)
                        for row in reader:
                            if len(row) >= 2:
                                products.append((row[0].strip(), row[1].strip()))
                else:
                    with open(file_path, 'r', encoding='utf-8') as file:
                        for line in file:
                            line = line.strip()
                            if line and ',' in line:
                                parts = line.split(',', 1)
                                if len(parts) == 2:
                                    products.append((parts[0].strip(), parts[1].strip()))
                
                if products:
                    self.settings_frame.set_products_list(products)
                    self.status_bar.set_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                else:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.results:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            defaultextension=".json",
            filetypes=[
                ("JSON files", "*.json"),
                ("CSV files", "*.csv"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                if file_path.endswith('.csv'):
                    self.export_manager.export_to_csv(self.results, file_path)
                else:
                    self.export_manager.export_to_json(self.results, file_path)
                
                self.status_bar.set_status(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
                self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        if not self.results:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        dialog = ExportDialog(self, "CSV Export")
        if dialog.result:
            file_path = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv")]
            )
            
            if file_path:
                try:
                    self.export_manager.export_to_csv(self.results, file_path, dialog.result)
                    self.status_bar.set_status(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∑–∞–≤–µ—Ä—à–µ–Ω: {file_path}")
                    self.logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV: {file_path}")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
    
    def export_to_json(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
        if not self.results:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json")]
        )
        
        if file_path:
            try:
                self.export_manager.export_to_json(self.results, file_path)
                self.status_bar.set_status(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON –∑–∞–≤–µ—Ä—à–µ–Ω: {file_path}")
                self.logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON: {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{str(e)}")
    
    def export_results(self):
        """–û–±—â–∏–π –¥–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if not self.results:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        dialog = ExportDialog(self)
        # –î–∏–∞–ª–æ–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"):
            self.results.clear()
            self.results_frame.clear_results()
            self.status_bar.set_status("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
            self.logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?"):
            self.log_frame.clear_logs()
            self.status_bar.set_status("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        dialog = SettingsDialog(self, self.config)
        if dialog.result:
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self._apply_settings(dialog.result)
    
    def _apply_settings(self, settings: Dict):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥
        for section, values in settings.items():
            for key, value in values.items():
                self.config.set(section, key, value)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        if 'appearance' in settings:
            if 'theme' in settings['appearance']:
                self.change_theme(settings['appearance']['theme'])
        
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    def change_theme(self, theme: str):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã"""
        ctk.set_appearance_mode(theme)
        self.config.set('appearance', 'theme', theme)
        self.status_bar.set_status(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme}")
    
    def show_hotkeys(self):
        """–ü–æ–∫–∞–∑ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        hotkeys_text = """
–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:

Ctrl+O - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
Ctrl+E - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
Ctrl+Enter - –ù–∞—á–∞—Ç—å —Å–∫—Ä–µ–π–ø–∏–Ω–≥
Escape - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–µ–π–ø–∏–Ω–≥
F5 - –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
Ctrl+, - –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        
        messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", hotkeys_text)
    
    def show_about(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        AboutDialog(self)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            theme = self.config.get('appearance', 'theme', 'system')
            ctk.set_appearance_mode(theme)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.settings_frame.load_settings(self.config)
            
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.settings_frame.save_settings(self.config)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config.save()
            
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_scraping:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–∫—Ä–µ–π–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏?"):
                self.stop_scraping()
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                if self.scraper_thread and self.scraper_thread.is_alive():
                    self.scraper_thread.join(timeout=5)
            else:
                return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.save_settings()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.destroy()
